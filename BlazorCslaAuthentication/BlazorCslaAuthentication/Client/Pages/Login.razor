@page "/login"
@using BlazorCslaAuthentication.Shared
@using System.Security.Claims
@using Csla
@using Csla.Blazor
@using Csla.Blazor.Client.Authentication
@inject ViewModel<UserCredentials> vm
@inject CslaUserService userService
@inject NavigationManager nav

<h3>Login</h3>

<p class="text-danger">@vm.ViewModelErrorText</p>

@if (vm.Model == null)
{
  <div>Loading...</div>
}
else
{
  <p>Enter any non-empty values for username and password.</p>
  <table>
    <thead>
      <tr>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <TextInputRow Property="vm.GetPropertyInfo(nameof(vm.Model.Username))" />
      <TextInputRow Property="vm.GetPropertyInfo(nameof(vm.Model.Password))" InputType="password" />
    </tbody>
  </table>
  <button @onclick="VerifyCredentials" disabled="@(!vm.Model.IsSavable)">Save</button>
}

@code {
  protected override void OnInitialized()
  {
    vm.ModelPropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());
  }

  protected override async Task OnParametersSetAsync()
  {
    await vm.RefreshAsync(() => DataPortal.CreateAsync<UserCredentials>());
  }

  private async void VerifyCredentials()
  {
    var identity = await DataPortal.FetchAsync<CustomIdentity>(vm.Model);
    var baseidentity = new ClaimsIdentity(identity.AuthenticationType);
    baseidentity.AddClaim(new Claim(ClaimTypes.Name, identity.Name));
    if (identity.Roles != null)
      foreach (var item in identity.Roles)
        baseidentity.AddClaim(new Claim(ClaimTypes.Role, item));
    var principal = new System.Security.Claims.ClaimsPrincipal(baseidentity);
    userService.CurrentUser = principal;
    StateHasChanged();
    nav.NavigateTo("/");
  }
}
